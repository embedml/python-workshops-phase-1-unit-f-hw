'''














!!! DO NOT EDIT THIS FILE !!!
It may result in incorrect grading or 
prevent you from completing the assignment 


















'''
import random
from unit_1f_hw import *

def test_car_class():
    mpg = random.randrange(-999,999)
    car_class = Car(miles_per_gallon=mpg, car_name="Name")
    assert car_class.mpg == mpg, f"Expected car_class's mpg field to be {mpg} but your class's mpg field contained {car_class.mpg}"

def test_dog_class():
    possible_dog_breeds = {"American Foxhound":66.87, "Australian Shepherd":37, "Beagle":20.3, "Chihuahua":4.53, "Great Dane":144.2, "Greyhound":70.96, "Mastiff":220.3, "Newfoundland":135.2, "Papillon":9.2, "Poodle":5.55, "Pug":16.01, "Rottweiler":122.3, "Shih Tzu":12.2, "Yorkshire Terrier":6.46}
    key = random.choice(list(possible_dog_breeds.keys()))     
    dog_class = Dog(breed=key, weight=possible_dog_breeds[key])
    assert dog_class.breed == key, f"Expecting breed field to be {key} but your class's field contianed {dog_class.breed}"
    assert dog_class.weight == possible_dog_breeds[key], f"Expected weight field to be {possible_dog_breeds[key]} but your class's field contained {dog_class.weight}."
    assert dog_class.get_breed() == key, f"Expecting get_breed() function to return {key} but your function returned {dog_class.get_breed()}"
    assert dog_class.get_weight() == possible_dog_breeds[key], f"Expected get_weight() function to return {possible_dog_breeds[key]} but your function returned {dog_class.get_weight()}."
    
def test_math_operations_class():
    math_operations = Math_Operations()
    a = random.randrange(-999,999)
    b = random.randrange(-999,999)
    m = random.randrange(-999,999)
    assert math_operations.add(a=a, b=b) == (a+b), f"Math_Operations: expected your add function to return {(a+b)} but it returned {math_operations.add(a=a, b=b)}"
    assert math_operations.sub(a=a, b=b) == (a-b), f"Math_Operations: expected your sub function to return {(a-b)} but it returned {math_operations.sub(a=a, b=b)}"
    assert math_operations.slope_intercept(m=m, x=a, b=b) == m*a+b, f"Math_Operations: expected your slope_intercept function to return {m*a+b} but it returned {math_operations.slope_intercept(m=m, x=a, b=b)}"
    assert math_operations.pythagorean(a=a, b=b) == (a**2+b**2)**0.5, f"Math_Operations: expected your pythagorean function to return {(a**2+b**2)**0.5} but it returned {math_operations.pythagorean(a=a, b=b)}"

def test_getting_pythags():
    pythags = getting_pythags()
    solutions = [1**(0.5), 8**(0.5), 10**(0.5), 212**(0.5), 101**(0.5), 9**(0.5), 5**(0.5), 50**(0.5), 5**(0.5)]
    for index, value in enumerate(pythags):
        sol = round(solutions[index], 3)
        assert round(value, 3) == sol, f"Failed for values on index: {index}"

def test_garage_class():

    t_g = Garage(num_spots=3)
    assert t_g.num_spots == 3, "Assigned num_spots to 3 but was not 3"
    assert type(t_g.cars) == list, "cars attribute was not a list"
    assert len(t_g.cars) == 0, "cars list did not start empty"
    t_c_1 = Car(car_name="Car 1", miles_per_gallon=10)
    t_c_2 = Car(car_name="Car 2", miles_per_gallon=11)
    t_c_3 = Car(car_name="Car 3", miles_per_gallon=12)
    t_c_4 = Car(car_name="Car 4", miles_per_gallon=13)
    assert t_g.add_car(t_c_1) == True, "Adding a car when there was space did not return True"
    assert t_g.num_spots == 2, "Added a car but num_spots did not decrease"
    assert t_g.show_cars() == [t_c_1], "Added a car but did not show correctly"

    assert t_g.add_car(t_c_2) == True, "Adding a car when there was space did not return True"
    assert t_g.num_spots == 1, "Added 2 cars but num_spots was not 1"
    assert t_g.show_cars() == [t_c_1, t_c_2,], "List of cars is not correct"

    assert t_g.add_car(t_c_3) == True, "Adding a car when there was space did not return True"
    assert t_g.num_spots == 0, "Added 3 cars but num_spots was not 0"
    assert t_g.show_cars() == [t_c_1, t_c_2, t_c_3,], "List of cars is not correct"

    assert t_g.add_car(t_c_4) == False, "Adding a car when there was no space did not return False"
    assert t_g.num_spots == 0, "Tried and failed to add a 4th car but num_spots was not 0"
    assert t_g.show_cars() == [t_c_1, t_c_2, t_c_3,], "List of cars is not correct"

def test_garage_problem():
    c_l, g_o = garage_problem()
    assert c_l == g_o.show_cars()
    assert g_o.num_spots == 0
    names = ["Toyota Tacoma", "Nissan Altima", "Volkswagon Beetle"]
    mpgs = [13, 22, 23]
    for i in range(len(names)):
        assert c_l[i].name == names[i]
        assert c_l[i].mpg == mpgs[i]
